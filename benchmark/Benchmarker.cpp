/*
 * Library for performing massively parallel computations on polygons.
 * Copyright (C) 2018 Ghostkeeper
 * This library is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
 * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for details.
 * You should have received a copy of the GNU Affero General Public License along with this library. If not, see <https://gnu.org/licenses/>.
 */

#include "Eigen/Core" //To perform calculations for interpolation between data points.
#include "Eigen/QR" //To perform QR resolution for linear least squares.
#include <iostream> //To output the benchmark data to stdout.
#include <time.h> //For high-resolution timers to measure benchmarks.
#include <vector> //Lists of problem sizes to test with.
#include "ApexException.h"
#include "BenchmarkData.h" //To use the pre-existing benchmark data to generate interpolation vectors.
#include "Benchmarker.h" //The header we're implementing.
#include "DeviceStatistics.h" //Getting the statistics of known devices to sample unknown devices better.
#include "OpenCL.h" //To get device information.
#include "OpenCLDevices.h" //To find the identifiers of the devices the benchmark is performed on.
#include "Point2.h" //To construct vertices for polygons.
#include "SimplePolygon.h" //A class of which we're benchmarking performance.
#include "SimplePolygonBenchmark.h" //The benchmark runners.

namespace apex {
namespace benchmarks {

const std::vector<SimplePolygonBenchmark> Benchmarker::device_benchmarks = {
	SimplePolygonBenchmark("area_opencl", [](const cl::Device* device, SimplePolygon& polygon) {polygon.area_opencl(*device);}),
	SimplePolygonBenchmark("contains_opencl", [](const cl::Device* device, SimplePolygon& polygon) {polygon.contains_opencl(*device, Point2(0, 0));})
};

const std::vector<SimplePolygonBenchmark> Benchmarker::host_benchmarks = {
	SimplePolygonBenchmark("area_host", [](const cl::Device*, SimplePolygon& polygon) {polygon.area_host();}),
	SimplePolygonBenchmark("contains_host", [](const cl::Device*, SimplePolygon& polygon) {polygon.contains_host(Point2(0, 0));})
};

Benchmarker::Benchmarker(const cl::Device* device) : device(device) { }

void Benchmarker::device_statistics() const {
	const std::string identity = OpenCLDevices::getInstance().getIdentifier(device);
	const DeviceStatistics statistics = OpenCLDevices::getInstance().getStatistics(device);
	std::cout << "devices[\"" << identity << "\"][\"device_type\"] = " << statistics.device_type << "u;" << std::endl;
	std::cout << "devices[\"" << identity << "\"][\"compute_units\"] = " << statistics.compute_units << "u;" << std::endl;
	std::cout << "devices[\"" << identity << "\"][\"items_per_compute_unit\"] = " << statistics.items_per_compute_unit << "u;" << std::endl;
	std::cout << "devices[\"" << identity << "\"][\"clock_frequency\"] = " << statistics.clock_frequency << "u;" << std::endl;
	std::cout << "devices[\"" << identity << "\"][\"global_memory\"] = " << statistics.global_memory << "u;" << std::endl;
	std::cout << "devices[\"" << identity << "\"][\"local_memory\"] = " << statistics.local_memory << "u;" << std::endl;
}

void Benchmarker::run() const {
	if(device) {
		for(const SimplePolygonBenchmark& benchmark : device_benchmarks) {
			benchmark.benchmark(device);
		}
	} else {
		for(const SimplePolygonBenchmark& benchmark : host_benchmarks) {
			benchmark.benchmark(nullptr);
		}
	}
}

}
}

/*
 * Writes a C++ file to stdout that defines the benchmark results.
 */
int main(int, char**) {
	std::cout << "//Generated by Apex' benchmarker." << std::endl;
	apex::OpenCLDevices& devices = apex::OpenCLDevices::getInstance();
	for(const cl::Device& device : devices.getAll()) {
		apex::benchmarks::Benchmarker benchmarker(&device);
		std::cerr << "Benchmarking: " << devices.getIdentifier(&device) << std::endl;
		benchmarker.device_statistics();
		benchmarker.run();
	}

	apex::benchmarks::Benchmarker benchmarker(nullptr);
	std::cerr << "Benchmarking: Host" << std::endl;
	benchmarker.device_statistics();
	benchmarker.run();

	for(const apex::benchmarks::SimplePolygonBenchmark& benchmark : apex::benchmarks::Benchmarker::device_benchmarks) {
		benchmark.compute_interpolation();
	}
	for(const apex::benchmarks::SimplePolygonBenchmark& benchmark : apex::benchmarks::Benchmarker::host_benchmarks) {
		benchmark.compute_interpolation();
	}

	return 0;
}