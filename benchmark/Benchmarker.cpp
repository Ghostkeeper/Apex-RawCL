/*
 * Library for performing massively parallel computations on polygons.
 * Copyright (C) 2018 Ghostkeeper
 * This library is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
 * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for details.
 * You should have received a copy of the GNU Affero General Public License along with this library. If not, see <https://gnu.org/licenses/>.
 */

#include <iostream> //To output the benchmark data to stdout.
#include <time.h> //For high-resolution timers to measure benchmarks.
#include <vector> //Lists of problem sizes to test with.
#include "Point2.h" //To construct vertices for polygons.
#include "SimplePolygon.h" //A class of which we're benchmarking performance.

namespace parallelogram {

void Benchmarker::benchmark_area() {
	//The polygon sizes we'll be testing with.
	const std::vector<size_t> sizes = {1, 10, 100, 1000, 10000, 1000000, 2000000, 4000000, 8000000, 16000000, 32000000, 64000000, 128000000, 256000000, 512000000, 1024000000};
	std::cout << "const std::vector<float> bench_host_area = {";
	for(const size_t size : sizes) {
		SimplePolygon polygon;
		for(size_t vertex = 0; vertex < size; vertex++) {
			polygon.emplace_back(vertex, vertex);
		}
		const unsigned long start_time = clock();
		polygon.area_host();
		const unsigned long end_time = clock();
		const float time = static_cast<float>(end_time - start_time) / CLOCKS_PER_SEC;
		std::cout << time << ", ";
	}
	std::cout << "};" << std::endl;

	std::cout << "const std::vector<float> bench_gpu_area = {";
	for(const size_t size : sizes) {
		SimplePolygon polygon;
		for(size_t vertex = 0; vertex < size; vertex++) {
			polygon.emplace_back(vertex, vertex);
		}
		const unsigned long start_time = clock();
		polygon.area_gpu();
		const unsigned long end_time = clock();
		const float time = static_cast<float>(end_time - start_time) / CLOCKS_PER_SEC;
		std::cout << time << ", ";
	}
	std::cout << "};" << std::endl;
}

}

/*
 * Writes a C++ file to stdout that defines the benchmark results.
 */
int main(int argc, char** argv) {
	std::cout << "//Generated by Parallelogram's benchmarker." << std::endl;
	parallelogram::Benchmarker benchmarker;
	benchmarker.benchmark_area();
	return 0;
}