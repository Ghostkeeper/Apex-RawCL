/*
 * Library for performing massively parallel computations on polygons.
 * Copyright (C) 2018 Ghostkeeper
 * This library is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
 * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for details.
 * You should have received a copy of the GNU Affero General Public License along with this library. If not, see <https://gnu.org/licenses/>.
 */

#ifndef TESTSIMPLEPOLYGONBATCH
#define TESTSIMPLEPOLYGONBATCH

#include <gtest/gtest.h>
#include <limits> //To simulate infinite memory.
#include "SimplePolygon.h" //Example polygons.
#include "SimplePolygonBatch.h"
#include "helpers/SimplePolygonBatchGroper.h" //The class under test.

namespace apex {

/*
 * Some fixtures for the TestSimplePolygonBatch tests.
 */
class TestSimplePolygonBatch : public testing::Test {
protected:
	/*
	 * A polygon to test with. Put it in a batch, for instance.
	 *
	 * It's a triangle, so it'll have 3 vertices. It's also fairly fast to copy.
	 * This is a triangle of 20 by 10 units (so an area of 100).
	 */
	SimplePolygon triangle;

	/*
	 * A vector containing ten triangles.
	 */
	std::vector<SimplePolygon> ten_triangles;

	/*
	 * Provides access to ``SimplePolygonBatch``'s private members in order to
	 * test them.
	 */
	SimplePolygonBatchGroper<std::vector<SimplePolygon>::const_iterator> const_groper;

	virtual void SetUp() {
		triangle.emplace_back(0, 0);
		triangle.emplace_back(20, 0);
		triangle.emplace_back(10, 20);
		for(size_t i = 0; i < 10; i++) {
			ten_triangles.push_back(triangle);
		}
	}
};

/*
 * Tests the count and total vertices as generated by the constructor, with an
 * empty batch.
 */
TEST_F(TestSimplePolygonBatch, CountEmpty) {
	const std::vector<SimplePolygon> empty;
	SimplePolygonBatch<std::vector<SimplePolygon>::const_iterator> batch(empty.begin(), empty.end());
	const_groper.tested_batch = &batch;
	EXPECT_EQ(0, const_groper.count());
	EXPECT_EQ(0, const_groper.total_vertices());
}

/*
 * Tests the count and total vertices as generated by the constructor, with a
 * batch containing one triangle.
 */
TEST_F(TestSimplePolygonBatch, CountOne) {
	std::vector<SimplePolygon> one_triangle;
	one_triangle.push_back(triangle);
	SimplePolygonBatch<std::vector<SimplePolygon>::const_iterator> batch(one_triangle.begin(), one_triangle.end());
	const_groper.tested_batch = &batch;

	EXPECT_EQ(1, const_groper.count());
	EXPECT_EQ(3, const_groper.total_vertices());
}

/*
 * Tests the count and total vertices as generated by the constructor, with a
 * batch containing ten triangles.
 */
TEST_F(TestSimplePolygonBatch, CountTen) {
	SimplePolygonBatch<std::vector<SimplePolygon>::const_iterator> batch(ten_triangles.begin(), ten_triangles.end());
	const_groper.tested_batch = &batch;
	EXPECT_EQ(10, const_groper.count());
	EXPECT_EQ(30, const_groper.total_vertices());
}

/*
 * Tests ensure_fit on an empty batch.
 *
 * Whatever size you use, it should never do anything with the batch.
 */
TEST_F(TestSimplePolygonBatch, EnsureFitEmpty) {
	const std::vector<SimplePolygon> empty;
	SimplePolygonBatch<std::vector<SimplePolygon>::const_iterator> batch(empty.begin(), empty.end());
	const_groper.tested_batch = &batch;

	bool result = const_groper.ensure_fit(100);
	EXPECT_TRUE(result);
	EXPECT_TRUE(const_groper.subbatches().empty());

	result = const_groper.ensure_fit(0);
	EXPECT_TRUE(result);
	EXPECT_TRUE(const_groper.subbatches().empty());
}

/*
 * Tests ensure_fit on a batch that is smaller than the maximum memory.
 *
 * The batch already fits, so it shouldn't create subbatches.
 */
TEST_F(TestSimplePolygonBatch, EnsureFitAlreadyFits) {
	SimplePolygonBatch<std::vector<SimplePolygon>::const_iterator> batch(ten_triangles.begin(), ten_triangles.end());
	const_groper.tested_batch = &batch;

	constexpr cl_ulong vertex_size = sizeof(cl_ulong) * 2;
	const cl_ulong expected_memory_usage = 40 * vertex_size; //10 triangles, with one extra vertex_size per polygon.
	bool result = const_groper.ensure_fit(expected_memory_usage + 100); //Fits comfortably.
	EXPECT_TRUE(result);
	EXPECT_TRUE(const_groper.subbatches().empty());

	result = const_groper.ensure_fit(expected_memory_usage); //Fits exactly.
	EXPECT_TRUE(result);
	EXPECT_TRUE(const_groper.subbatches().empty());
}

/*
 * Starts running the tests.
 *
 * This calls upon GoogleTest to start testing.
 * \param argc The number of arguments to read.
 * \param argv The arguments provided to this application via the command.
 * \return ``0`` if all tests ran successfully, or something else if any test
 * failed.
 */
int main(int argc, char* argv[]) {
	testing::InitGoogleTest(&argc, argv);
	return RUN_ALL_TESTS();
}

}

#endif //TESTSIMPLEPOLYGONBATCH